=begin
#Admin API

#The Admin API represents all functionality that a Design Huddle client administrator may perform. Most API methods do not require a specific user context and can be accessed using an App Access Token for authorization, but some methods must run on behalf of a specific user and therefore must use a User Access Token. The most common integration use cases consist of template management/synchronization and updating/approving/exporting user-created design projects. Read more about authentication <a target=\"_parent\" href=\"https://api.designhuddle.com#authentication\">here</a> and embedding the Design Huddle editor <a target=\"_parent\" href=\"https://api.designhuddle.com#embedding\">here</a>.

The version of the OpenAPI document: 2023-02-02T22:12:58Z
Contact: support@designhuddle.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.3.0

=end

require 'cgi'

module DesignHuddleAdmin
  class TemplatesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a template customization object
    # @param template_customization_objects_post_request [TemplateCustomizationObjectsPOSTRequest] 
    # @param [Hash] opts the optional parameters
    # @return [TemplateCustomizationObjectsPOSTSuccess]
    def template_customization_objects_post(template_customization_objects_post_request, opts = {})
      data, _status_code, _headers = template_customization_objects_post_with_http_info(template_customization_objects_post_request, opts)
      data
    end

    # Create a template customization object
    # @param template_customization_objects_post_request [TemplateCustomizationObjectsPOSTRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TemplateCustomizationObjectsPOSTSuccess, Integer, Hash)>] TemplateCustomizationObjectsPOSTSuccess data, response status code and response headers
    def template_customization_objects_post_with_http_info(template_customization_objects_post_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TemplatesApi.template_customization_objects_post ...'
      end
      # verify the required parameter 'template_customization_objects_post_request' is set
      if @api_client.config.client_side_validation && template_customization_objects_post_request.nil?
        fail ArgumentError, "Missing the required parameter 'template_customization_objects_post_request' when calling TemplatesApi.template_customization_objects_post"
      end
      # resource path
      local_var_path = '/template/customization-objects'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(template_customization_objects_post_request)

      # return_type
      return_type = opts[:debug_return_type] || 'TemplateCustomizationObjectsPOSTSuccess'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['UserAccessToken']

      new_options = opts.merge(
        :operation => :"TemplatesApi.template_customization_objects_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TemplatesApi#template_customization_objects_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve template publish progress
    # @param job_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [TemplateJobsJobIDGETSuccess]
    def template_jobs_job_id_get(job_id, opts = {})
      data, _status_code, _headers = template_jobs_job_id_get_with_http_info(job_id, opts)
      data
    end

    # Retrieve template publish progress
    # @param job_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TemplateJobsJobIDGETSuccess, Integer, Hash)>] TemplateJobsJobIDGETSuccess data, response status code and response headers
    def template_jobs_job_id_get_with_http_info(job_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TemplatesApi.template_jobs_job_id_get ...'
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling TemplatesApi.template_jobs_job_id_get"
      end
      # resource path
      local_var_path = '/template/jobs/{job_id}'.sub('{' + 'job_id' + '}', CGI.escape(job_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TemplateJobsJobIDGETSuccess'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AppAccessToken', 'UserAccessToken']

      new_options = opts.merge(
        :operation => :"TemplatesApi.template_jobs_job_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TemplatesApi#template_jobs_job_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List templates
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :brand_id Specify the Brand ID to filter the result by.
    # @option opts [String] :brand_code Specify the Brand Code to filter the result by.
    # @option opts [String] :media_type Specify the media type to filter the result by.
    # @option opts [Array<String>] :media_types Specify the media types to filter the result by.
    # @option opts [String] :template_status Specify the template status to filter the result by. (default to 'active')
    # @option opts [Array<String>] :template_statuses Specify the template statuses to filter the result by.
    # @option opts [Integer] :primary_template_category_item_id Specify the Primary Template Category Item ID to filter the result by.
    # @option opts [Array<Integer>] :primary_template_category_item_ids Specify the Primary Template Category Item IDs to filter the result by.
    # @option opts [String] :source_project_id Specify the Source Project ID to filter the result by.
    # @option opts [Array<String>] :source_project_ids Specify the Source Project IDs to filter the result by.
    # @option opts [Integer] :width Specify the width to filter the result by.
    # @option opts [Integer] :height Specify the height to filter the result by.
    # @option opts [String] :unit_type Specify the unit type to filter the result by.
    # @option opts [String] :search A search term used to narrow the focus of the result.
    # @option opts [String] :sort Specify which attribute to order the result by. (default to 'date_created')
    # @option opts [String] :order Specify whether the result should be retrieved in ascending or descending order. (default to 'DESC')
    # @option opts [Integer] :limit Specify the number of items per page to return. (default to 50)
    # @option opts [Integer] :page Specify which page of the result to return. (default to 1)
    # @option opts [Array<String>] :fields Specify the fields to the retrieve.
    # @return [TemplatesGETSuccess]
    def templates_get(opts = {})
      data, _status_code, _headers = templates_get_with_http_info(opts)
      data
    end

    # List templates
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :brand_id Specify the Brand ID to filter the result by.
    # @option opts [String] :brand_code Specify the Brand Code to filter the result by.
    # @option opts [String] :media_type Specify the media type to filter the result by.
    # @option opts [Array<String>] :media_types Specify the media types to filter the result by.
    # @option opts [String] :template_status Specify the template status to filter the result by. (default to 'active')
    # @option opts [Array<String>] :template_statuses Specify the template statuses to filter the result by.
    # @option opts [Integer] :primary_template_category_item_id Specify the Primary Template Category Item ID to filter the result by.
    # @option opts [Array<Integer>] :primary_template_category_item_ids Specify the Primary Template Category Item IDs to filter the result by.
    # @option opts [String] :source_project_id Specify the Source Project ID to filter the result by.
    # @option opts [Array<String>] :source_project_ids Specify the Source Project IDs to filter the result by.
    # @option opts [Integer] :width Specify the width to filter the result by.
    # @option opts [Integer] :height Specify the height to filter the result by.
    # @option opts [String] :unit_type Specify the unit type to filter the result by.
    # @option opts [String] :search A search term used to narrow the focus of the result.
    # @option opts [String] :sort Specify which attribute to order the result by. (default to 'date_created')
    # @option opts [String] :order Specify whether the result should be retrieved in ascending or descending order. (default to 'DESC')
    # @option opts [Integer] :limit Specify the number of items per page to return. (default to 50)
    # @option opts [Integer] :page Specify which page of the result to return. (default to 1)
    # @option opts [Array<String>] :fields Specify the fields to the retrieve.
    # @return [Array<(TemplatesGETSuccess, Integer, Hash)>] TemplatesGETSuccess data, response status code and response headers
    def templates_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TemplatesApi.templates_get ...'
      end
      allowable_values = ["digital", "video", "print", "presentation"]
      if @api_client.config.client_side_validation && opts[:'media_type'] && !allowable_values.include?(opts[:'media_type'])
        fail ArgumentError, "invalid value for \"media_type\", must be one of #{allowable_values}"
      end
      allowable_values = ["digital", "video", "print", "presentation"]
      if @api_client.config.client_side_validation && opts[:'media_types'] && !opts[:'media_types'].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"media_types\", must include one of #{allowable_values}"
      end
      allowable_values = ["active", "hidden", "archived"]
      if @api_client.config.client_side_validation && opts[:'template_status'] && !allowable_values.include?(opts[:'template_status'])
        fail ArgumentError, "invalid value for \"template_status\", must be one of #{allowable_values}"
      end
      allowable_values = ["active", "hidden", "archived"]
      if @api_client.config.client_side_validation && opts[:'template_statuses'] && !opts[:'template_statuses'].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"template_statuses\", must include one of #{allowable_values}"
      end
      allowable_values = ["px", "in", "mm"]
      if @api_client.config.client_side_validation && opts[:'unit_type'] && !allowable_values.include?(opts[:'unit_type'])
        fail ArgumentError, "invalid value for \"unit_type\", must be one of #{allowable_values}"
      end
      allowable_values = ["ASC", "DESC"]
      if @api_client.config.client_side_validation && opts[:'order'] && !allowable_values.include?(opts[:'order'])
        fail ArgumentError, "invalid value for \"order\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling TemplatesApi.templates_get, must be smaller than or equal to 1000.'
      end

      allowable_values = ["template_id", "template_code", "internal_project_id", "source_project", "media_type", "template_title", "template_status", "dimensions", "page_count", "scene_count", "duration", "preview_url", "thumbnail_url", "primary_template_category", "primary_template_category_item", "brand", "user_groups_match_type", "default_social_post_text", "date_created", "date_updated", "project_count"]
      if @api_client.config.client_side_validation && opts[:'fields'] && !opts[:'fields'].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"fields\", must include one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/templates'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'brand_id'] = opts[:'brand_id'] if !opts[:'brand_id'].nil?
      query_params[:'brand_code'] = opts[:'brand_code'] if !opts[:'brand_code'].nil?
      query_params[:'media_type'] = opts[:'media_type'] if !opts[:'media_type'].nil?
      query_params[:'media_types'] = @api_client.build_collection_param(opts[:'media_types'], :multi) if !opts[:'media_types'].nil?
      query_params[:'template_status'] = opts[:'template_status'] if !opts[:'template_status'].nil?
      query_params[:'template_statuses'] = @api_client.build_collection_param(opts[:'template_statuses'], :multi) if !opts[:'template_statuses'].nil?
      query_params[:'primary_template_category_item_id'] = opts[:'primary_template_category_item_id'] if !opts[:'primary_template_category_item_id'].nil?
      query_params[:'primary_template_category_item_ids'] = @api_client.build_collection_param(opts[:'primary_template_category_item_ids'], :multi) if !opts[:'primary_template_category_item_ids'].nil?
      query_params[:'source_project_id'] = opts[:'source_project_id'] if !opts[:'source_project_id'].nil?
      query_params[:'source_project_ids'] = @api_client.build_collection_param(opts[:'source_project_ids'], :multi) if !opts[:'source_project_ids'].nil?
      query_params[:'width'] = opts[:'width'] if !opts[:'width'].nil?
      query_params[:'height'] = opts[:'height'] if !opts[:'height'].nil?
      query_params[:'unit_type'] = opts[:'unit_type'] if !opts[:'unit_type'].nil?
      query_params[:'search'] = opts[:'search'] if !opts[:'search'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'fields'] = @api_client.build_collection_param(opts[:'fields'], :multi) if !opts[:'fields'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TemplatesGETSuccess'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AppAccessToken', 'UserAccessToken']

      new_options = opts.merge(
        :operation => :"TemplatesApi.templates_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TemplatesApi#templates_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Publish a template
    # @param templates_post_request [TemplatesPOSTRequest] 
    # @param [Hash] opts the optional parameters
    # @return [TemplatesPOSTSuccess]
    def templates_post(templates_post_request, opts = {})
      data, _status_code, _headers = templates_post_with_http_info(templates_post_request, opts)
      data
    end

    # Publish a template
    # @param templates_post_request [TemplatesPOSTRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TemplatesPOSTSuccess, Integer, Hash)>] TemplatesPOSTSuccess data, response status code and response headers
    def templates_post_with_http_info(templates_post_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TemplatesApi.templates_post ...'
      end
      # verify the required parameter 'templates_post_request' is set
      if @api_client.config.client_side_validation && templates_post_request.nil?
        fail ArgumentError, "Missing the required parameter 'templates_post_request' when calling TemplatesApi.templates_post"
      end
      # resource path
      local_var_path = '/templates'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(templates_post_request)

      # return_type
      return_type = opts[:debug_return_type] || 'TemplatesPOSTSuccess'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AppAccessToken', 'UserAccessToken']

      new_options = opts.merge(
        :operation => :"TemplatesApi.templates_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TemplatesApi#templates_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Archive a template
    # @param template_id_template_code [TemplatesTemplateIdTemplateCodeDeleteTemplateIdTemplateCodeParameter] 
    # @param [Hash] opts the optional parameters
    # @return [TemplatesTemplateIDBaseSuccess]
    def templates_template_id_template_code_delete(template_id_template_code, opts = {})
      data, _status_code, _headers = templates_template_id_template_code_delete_with_http_info(template_id_template_code, opts)
      data
    end

    # Archive a template
    # @param template_id_template_code [TemplatesTemplateIdTemplateCodeDeleteTemplateIdTemplateCodeParameter] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TemplatesTemplateIDBaseSuccess, Integer, Hash)>] TemplatesTemplateIDBaseSuccess data, response status code and response headers
    def templates_template_id_template_code_delete_with_http_info(template_id_template_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TemplatesApi.templates_template_id_template_code_delete ...'
      end
      # verify the required parameter 'template_id_template_code' is set
      if @api_client.config.client_side_validation && template_id_template_code.nil?
        fail ArgumentError, "Missing the required parameter 'template_id_template_code' when calling TemplatesApi.templates_template_id_template_code_delete"
      end
      # resource path
      local_var_path = '/templates/{template_id/template_code}'.sub('{' + 'template_id/template_code' + '}', CGI.escape(template_id_template_code.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TemplatesTemplateIDBaseSuccess'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AppAccessToken', 'UserAccessToken']

      new_options = opts.merge(
        :operation => :"TemplatesApi.templates_template_id_template_code_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TemplatesApi#templates_template_id_template_code_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a template
    # @param template_id_template_code [TemplatesTemplateIdTemplateCodeDeleteTemplateIdTemplateCodeParameter] 
    # @param [Hash] opts the optional parameters
    # @return [TemplatesTemplateIDGETSuccess]
    def templates_template_id_template_code_get(template_id_template_code, opts = {})
      data, _status_code, _headers = templates_template_id_template_code_get_with_http_info(template_id_template_code, opts)
      data
    end

    # Retrieve a template
    # @param template_id_template_code [TemplatesTemplateIdTemplateCodeDeleteTemplateIdTemplateCodeParameter] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TemplatesTemplateIDGETSuccess, Integer, Hash)>] TemplatesTemplateIDGETSuccess data, response status code and response headers
    def templates_template_id_template_code_get_with_http_info(template_id_template_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TemplatesApi.templates_template_id_template_code_get ...'
      end
      # verify the required parameter 'template_id_template_code' is set
      if @api_client.config.client_side_validation && template_id_template_code.nil?
        fail ArgumentError, "Missing the required parameter 'template_id_template_code' when calling TemplatesApi.templates_template_id_template_code_get"
      end
      # resource path
      local_var_path = '/templates/{template_id/template_code}'.sub('{' + 'template_id/template_code' + '}', CGI.escape(template_id_template_code.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TemplatesTemplateIDGETSuccess'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AppAccessToken', 'UserAccessToken']

      new_options = opts.merge(
        :operation => :"TemplatesApi.templates_template_id_template_code_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TemplatesApi#templates_template_id_template_code_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a template
    # @param template_id_template_code [TemplatesTemplateIdTemplateCodeDeleteTemplateIdTemplateCodeParameter] 
    # @param templates_template_idpatch_request [TemplatesTemplateIDPATCHRequest] 
    # @param [Hash] opts the optional parameters
    # @return [TemplatesTemplateIDBaseSuccess]
    def templates_template_id_template_code_patch(template_id_template_code, templates_template_idpatch_request, opts = {})
      data, _status_code, _headers = templates_template_id_template_code_patch_with_http_info(template_id_template_code, templates_template_idpatch_request, opts)
      data
    end

    # Update a template
    # @param template_id_template_code [TemplatesTemplateIdTemplateCodeDeleteTemplateIdTemplateCodeParameter] 
    # @param templates_template_idpatch_request [TemplatesTemplateIDPATCHRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TemplatesTemplateIDBaseSuccess, Integer, Hash)>] TemplatesTemplateIDBaseSuccess data, response status code and response headers
    def templates_template_id_template_code_patch_with_http_info(template_id_template_code, templates_template_idpatch_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TemplatesApi.templates_template_id_template_code_patch ...'
      end
      # verify the required parameter 'template_id_template_code' is set
      if @api_client.config.client_side_validation && template_id_template_code.nil?
        fail ArgumentError, "Missing the required parameter 'template_id_template_code' when calling TemplatesApi.templates_template_id_template_code_patch"
      end
      # verify the required parameter 'templates_template_idpatch_request' is set
      if @api_client.config.client_side_validation && templates_template_idpatch_request.nil?
        fail ArgumentError, "Missing the required parameter 'templates_template_idpatch_request' when calling TemplatesApi.templates_template_id_template_code_patch"
      end
      # resource path
      local_var_path = '/templates/{template_id/template_code}'.sub('{' + 'template_id/template_code' + '}', CGI.escape(template_id_template_code.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(templates_template_idpatch_request)

      # return_type
      return_type = opts[:debug_return_type] || 'TemplatesTemplateIDBaseSuccess'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AppAccessToken', 'UserAccessToken']

      new_options = opts.merge(
        :operation => :"TemplatesApi.templates_template_id_template_code_patch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TemplatesApi#templates_template_id_template_code_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Upsert a template
    # @param template_id_template_code [TemplatesTemplateIdTemplateCodeDeleteTemplateIdTemplateCodeParameter] 
    # @param templates_template_idput_request [TemplatesTemplateIDPUTRequest] 
    # @param [Hash] opts the optional parameters
    # @return [TemplatesTemplateIDBaseSuccess]
    def templates_template_id_template_code_put(template_id_template_code, templates_template_idput_request, opts = {})
      data, _status_code, _headers = templates_template_id_template_code_put_with_http_info(template_id_template_code, templates_template_idput_request, opts)
      data
    end

    # Upsert a template
    # @param template_id_template_code [TemplatesTemplateIdTemplateCodeDeleteTemplateIdTemplateCodeParameter] 
    # @param templates_template_idput_request [TemplatesTemplateIDPUTRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TemplatesTemplateIDBaseSuccess, Integer, Hash)>] TemplatesTemplateIDBaseSuccess data, response status code and response headers
    def templates_template_id_template_code_put_with_http_info(template_id_template_code, templates_template_idput_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TemplatesApi.templates_template_id_template_code_put ...'
      end
      # verify the required parameter 'template_id_template_code' is set
      if @api_client.config.client_side_validation && template_id_template_code.nil?
        fail ArgumentError, "Missing the required parameter 'template_id_template_code' when calling TemplatesApi.templates_template_id_template_code_put"
      end
      # verify the required parameter 'templates_template_idput_request' is set
      if @api_client.config.client_side_validation && templates_template_idput_request.nil?
        fail ArgumentError, "Missing the required parameter 'templates_template_idput_request' when calling TemplatesApi.templates_template_id_template_code_put"
      end
      # resource path
      local_var_path = '/templates/{template_id/template_code}'.sub('{' + 'template_id/template_code' + '}', CGI.escape(template_id_template_code.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(templates_template_idput_request)

      # return_type
      return_type = opts[:debug_return_type] || 'TemplatesTemplateIDBaseSuccess'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AppAccessToken', 'UserAccessToken']

      new_options = opts.merge(
        :operation => :"TemplatesApi.templates_template_id_template_code_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TemplatesApi#templates_template_id_template_code_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
